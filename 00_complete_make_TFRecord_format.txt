elif normalization_type == 'partial-normalization':
# 특정 열에 대해 정규화와 표준화 분리
normalized_sequence = np.zeros_like(sequence)
#[ 'open', 'high', 'low', 'close', 'Upper_BB', 'Middle_BB', 'Lower_BB','volume', 'SMA5', 'SMA20', 'SMA50', 'SMA144', 'EMA5','EMA20', 'EMA50', 'EMA144', 'MACD', 'MACD_signal','MACD_diff', 'RSI6','RSI12','RSI24',  'ADX']
#  ( 0        1       2       3          4         5             6  )     (7)      (  8      9       10       11)    ( 12     13       14       15 )     ( 16       17    )      |18|       ( 19      20      21 )  (22)
#() :min-max, []:standard, {}:change-rate, ||:zero center        
# open high low close  Upper_BB Middle_BB Lower_BB
feature_min = np.min(sequence[:, 0:7])
feature_max = np.max(sequence[:, 0:7])
normalized_sequence[:, 0:7] = (sequence[:, 0:7] - feature_min) / (feature_max - feature_min)
# volume
feature_min = np.min(sequence[:, 7])
feature_max = np.max(sequence[:, 7])
normalized_sequence[:, 7] = (sequence[:, 7] - feature_min) / (feature_max - feature_min)
# SMA5, SMA20, SMA50, SMA144
feature_min = np.min(sequence[:, 8:12])
feature_max = np.max(sequence[:, 8:12])
normalized_sequence[:, 8:12] = (sequence[:, 8:12] - feature_min) / (feature_max - feature_min)
# EMA5, EMA20, EMA50, EMA144
feature_min = np.min(sequence[:, 12:16])
feature_max = np.max(sequence[:, 12:16])
normalized_sequence[:, 12:16] = (sequence[:, 12:16] - feature_min) / (feature_max - feature_min)        
#   MACD, MACD_signal
feature_min = np.min(sequence[:, 16:18])
feature_max = np.max(sequence[:, 16:18])
normalized_sequence[:, 16:18] = (sequence[:, 16:18] - feature_min) / (feature_max - feature_min)
# MACD_diff
fixedScale_columns = 18
max_abs_value = np.max(np.abs(sequence[:, fixedScale_columns]))  # 최대 절대값
normalized_sequence[:, fixedScale_columns] = sequence[:, fixedScale_columns] / max_abs_value 
# RSI6, RSI12, RSI24
feature_min = np.min(sequence[:, 19:22])
feature_max = np.max(sequence[:, 19:22])
normalized_sequence[:, 19:22] = (sequence[:, 19:22] - feature_min) / (feature_max - feature_min)
# ADX
feature_min = np.min(sequence[:, 22])
feature_max = np.max(sequence[:, 22])
normalized_sequence[:, 22] = (sequence[:, 22] - feature_min) / (feature_max - feature_min)


# ['open', 'high', 'low', 'close', 'Upper_BB', 'Middle_BB', 'Lower_BB','volume', 'SMA5', 'SMA20', 'SMA50', 'SMA144', 'EMA5','EMA20', 'EMA50', 'EMA144', 
#  { 0       1       2       3          4         5             6   }    { 7}      {  8        9       10       11 }     { 12     13       14       15}
#'MACD', 'MACD_signal','MACD_diff', 'RSI6','RSI12','RSI24', 'ADX','SAR', 'Stoch_K', 'Stoch_D', 'Williams_R', 'CCI', 'OBV', 'Chaikin_Osc', 'Momentum', 
# { 16         17            18  } {  19     20      21}      22    23     24         25          26           27      28     29           30        
#'ROC', 'ATR', 'STDDEV', 'VWAP', 'Pivot', 'Resistance1', 'Support1']
#  31     32      33       34      35        36             37
#() :min-max, []:standard,  {}:zero center  , ||:change-rate,

  elif normalization_type == 'partial-normalization':
  # 특정 열에 대해 정규화와 표준화 분리
  normalized_sequence = np.zeros_like(sequence)

  fixedScale_columns = 15
  max_abs_value = np.max(np.abs(features[:, fixedScale_columns]))  # 최대 절대값
  normalized_sequence[:, fixedScale_columns] = features[:, fixedScale_columns] / max_abs_value 
elif normalization_type == 'change-rate':