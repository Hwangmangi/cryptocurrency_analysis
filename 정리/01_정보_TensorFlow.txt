●1. layer설명
●2. tf.data.Dataset 사용
●3. TFRecord


포지셔널 인코딩
포지셔널 인코딩 값은 입력 데이터 크기의 1%에서 10% 사이로 설정하는 것이 적당합니다.

x = NormalizeByFirstRow()(inputs)
(inputs) 전달: NormalizeByFirstRow() 인스턴스를 호출하는 시점에서, inputs 텐서가 call 메소드의 매개변수로 전달됩니다.
 즉, inputs는 (batch_size, 10, 5) 크기의 텐서로, NormalizeByFirstRow 레이어에 들어가게 됩니다.
====================================================================================================
●1. layer설명

1. tf.keras.layers.MultiHeadAttention
tf.keras.layers.MultiHeadAttention(
    num_heads,  # 주의 메커니즘의 헤드 수
    key_dim,  # 각 헤드의 차원
    value_dim=None,  # 값 벡터의 차원 (기본값: None)
    dropout=0.0,  # 드롭아웃 비율 (기본값: 0.0)
    use_bias=True,  # 바이어스 사용 여부 (기본값: True)
    output_shape=None,  # 출력 형태 (기본값: None)
    attention_axes=None,  # 주의 메커니즘이 적용될 축 (기본값: None)
    kernel_initializer='glorot_uniform',  # 커널 초기화 방법 (기본값: 'glorot_uniform')
    bias_initializer='zeros',  # 바이어스 초기화 방법 (기본값: 'zeros')
    kernel_regularizer=None,  # 커널 정규화 방법 (기본값: None)
    bias_regularizer=None,  # 바이어스 정규화 방법 (기본값: None)
    activity_regularizer=None,  # 출력 정규화 방법 (기본값: None)
    kernel_constraint=None,  # 커널 제약 조건 (기본값: None)
    bias_constraint=None  # 바이어스 제약 조건 (기본값: None)
)
설명: 여러 개의 주의 메커니즘 헤드를 사용하여 입력의 다양한 부분에 주의를 기울이는 층입니다. 이는 모델이 입력의 다양한 부분에서 정보를 추출할 수 있게 합니다.

2. tf.keras.layers.Dropout
tf.keras.layers.Dropout(
    rate,  # 드롭아웃 비율
    noise_shape=None,  # 드롭아웃을 적용할 입력의 형태 (기본값: None)
    seed=None  # 랜덤 시드 (기본값: None)
)
설명: 과적합을 방지하기 위해 학습 중에 무작위로 일부 뉴런을 비활성화하는 층입니다.

3. tf.keras.layers.LayerNormalization
tf.keras.layers.LayerNormalization(
    axis=-1,  # 정규화할 축 (기본값: -1)
    epsilon=1e-6,  # 수치 안정성을 위한 작은 상수 (기본값: 1e-6)
    center=True,  # 이동 파라미터를 사용할지 여부 (기본값: True)
    scale=True,  # 스케일 파라미터를 사용할지 여부 (기본값: True)
    beta_initializer='zeros',  # 이동 파라미터 초기화 방법 (기본값: 'zeros')
    gamma_initializer='ones',  # 스케일 파라미터 초기화 방법 (기본값: 'ones')
    beta_regularizer=None,  # 이동 파라미터 정규화 방법 (기본값: None)
    gamma_regularizer=None,  # 스케일 파라미터 정규화 방법 (기본값: None)
    beta_constraint=None,  # 이동 파라미터 제약 조건 (기본값: None)
    gamma_constraint=None  # 스케일 파라미터 제약 조건 (기본값: None)
)
설명: 입력 데이터를 정규화하여 학습을 안정화하고 가속화하는 층입니다.

4. tf.keras.layers.Dense
tf.keras.layers.Dense(
    units,  # 출력 공간의 차원 (즉, 뉴런의 수)
    activation=None,  # 활성화 함수 (기본값: None)
    use_bias=True,  # 바이어스 사용 여부 (기본값: True)
    kernel_initializer='glorot_uniform',  # 커널 초기화 방법 (기본값: 'glorot_uniform')
    bias_initializer='zeros',  # 바이어스 초기화 방법 (기본값: 'zeros')
    kernel_regularizer=None,  # 커널 정규화 방법 (기본값: None)
    bias_regularizer=None,  # 바이어스 정규화 방법 (기본값: None)
    activity_regularizer=None,  # 출력 정규화 방법 (기본값: None)
    kernel_constraint=None,  # 커널 제약 조건 (기본값: None)
    bias_constraint=None  # 바이어스 제약 조건 (기본값: None)
)
설명: 완전 연결 층으로, 입력 데이터에 선형 변환을 적용하고 활성화 함수를 통해 비선형성을 추가합니다.

5. tf.keras.layers.Flatten
tf.keras.layers.Flatten(
    data_format=None  # 데이터 형식 (기본값: None)
)
설명: 입력 데이터를 1차원으로 평탄화하는 층입니다. 주로 Dense 층에 연결하기 전에 사용됩니다.

6. tf.keras.Model
tf.keras.Model(
    inputs,  # 모델의 입력 텐서
    outputs,  # 모델의 출력 텐서
    name=None  # 모델 이름 (기본값: None)
)
설명: 케라스 모델을 정의하는 클래스입니다. 입력과 출력을 지정하여 모델을 구성합니다.

7. tf.keras.Input
tf.keras.Input(
    shape=None,  # 입력 텐서의 형태
    batch_size=None,  # 배치 크기 (기본값: None)
    name=None,  # 입력 이름 (기본값: None)
    dtype=None,  # 데이터 타입 (기본값: None)
    sparse=False,  # 희소 행렬 여부 (기본값: False)
    tensor=None,  # 기존 텐서 (기본값: None)
    ragged=False  # 불규칙 텐서 여부 (기본값: False)
)
설명: 모델의 입력 텐서를 정의하는 함수입니다.

8. tf.keras.layers.Bidirectional
tf.keras.layers.Bidirectional(
    layer,  # 양방향으로 감쌀 레이어 (예: LSTM)
    merge_mode='concat',  # 병합 모드 (기본값: 'concat')
    backward_layer=None  # 역방향 레이어 (기본값: None)
)
설명: 순환 신경망(RNN) 층을 양방향으로 감싸서 순방향과 역방향 모두에서 정보를 학습할 수 있게 합니다.

9. tf.keras.layers.Conv1D
tf.keras.layers.Conv1D(
    filters,  # 출력 공간의 차원 (즉, 필터의 수)
    kernel_size,  # 커널(필터)의 크기
    strides=1,  # 스트라이드 크기 (기본값: 1)
    padding='valid',  # 패딩 방법 (기본값: 'valid')
    data_format='channels_last',  # 데이터 형식 (기본값: 'channels_last')
    dilation_rate=1,  # 팽창 비율 (기본값: 1)
    activation=None,  # 활성화 함수 (기본값: None)
    use_bias=True,  # 바이어스 사용 여부 (기본값: True)
    kernel_initializer='glorot_uniform',  # 커널 초기화 방법 (기본값: 'glorot_uniform')
    bias_initializer='zeros',  # 바이어스 초기화 방법 (기본값: 'zeros')
    kernel_regularizer=None,  # 커널 정규화 방법 (기본값: None)
    bias_regularizer=None,  # 바이어스 정규화 방법 (기본값: None)
    activity_regularizer=None,  # 출력 정규화 방법 (기본값: None)
    kernel_constraint=None,  # 커널 제약 조건 (기본값: None)
    bias_constraint=None  # 바이어스 제약 조건 (기본값: None)
)
설명: 1차원 합성곱 층으로, 시퀀스 데이터의 특징을 추출하는 데 사용됩니다.

10. tf.keras.layers.GlobalAveragePooling1D
tf.keras.layers.GlobalAveragePooling1D(
    data_format='channels_last'  # 데이터 형식 (기본값: 'channels_last')
)
설명: 시퀀스의 각 특징에 대해 평균을 계산하여 시퀀스의 길이를 줄이는 층입니다.

11. tf.keras.layers.GlobalMaxPooling1D
tf.keras.layers.GlobalMaxPooling1D(
    data_format='channels_last'  # 데이터 형식 (기본값: 'channels_last')
)
설명: 시퀀스의 각 특징에 대해 최대값을 계산하여 시퀀스의 길이를 줄이는 층입니다.